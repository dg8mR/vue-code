<script setup>
import { ref, reactive, computed } from 'vue'

const state = reactive({
  enemy: {
    hp: 10,
    lvl: 1,
    maxhp: 10,
    ex: 0,
    attack: 0,
  },
  player: {
    hp: 100,
    lvl: 1,
    maxhp: 100,
    ex: 0,
    attack: 5, // –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ç–∞–∫–∏
    lowk: 0,   // –õ–æ–≤–∫–æ—Å—Ç—å
    inte: 0,   // –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç
    points: 10, // –¢–æ—á–∫–∏ —É–º–µ–Ω–∏–π (–¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤)
    yclun: "–£–∫–ª–æ–Ω–∏–ª—Å—è",
    playing: false,
    class:"",
    
  },
  log: "",
  clog:"",
  
})

// –í—ã–±—Ä–∞–Ω–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞
const activeTab = ref('game') // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±—Ä–∞–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ "–ò–≥—Ä–∞"

function getRandomInt(min, max) {
  min = Math.ceil(min)
  max = Math.floor(max)
  return Math.floor(Math.random() * (max - min + 1)) + min
}

// –§—É–Ω–∫—Ü–∏—è –∞—Ç–∞–∫–∏ –∏–≥—Ä–æ–∫–∞ –ø–æ –±–æ—Å—Å—É
function playerAttack() {
  if (activeTab.value !== 'game' || state.player.hp <= 0) return
  state.player.attack = getRandomInt(state.player.lvl, state.player.lvl * 2)
  state.enemy.hp -= state.player.attack
  if (state.enemy.hp <= 0) {
    state.player.ex += state.enemy.lvl
    state.enemy.lvl += 1
    state.enemy.hp = state.enemy.lvl * 10
    state.enemy.maxhp = state.enemy.hp
    state.player.points += 5
    state.player.hp = state.player.maxhp
    if (state.player.ex >= 10) {
      state.player.lvl += 1
      state.player.ex = 0
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –∞—Ç–∞–∫–∏ –±–æ—Å—Å–∞ –ø–æ –∏–≥—Ä–æ–∫—É
function bossAttack() {
  if (activeTab.value !== 'game' || state.player.hp <= 0) return;
  state.enemy.attack = getRandomInt(state.enemy.lvl, state.enemy.lvl * 2);
  if(yclon()){
    state.player.yclun = "–£–∫–ª–æ–Ω–∏–ª—Å—è"
  }
  else{
    state.player.hp -= state.enemy.attack;
    state.player.yclun = "–Ω–µ —É–∫–ª–æ–Ω–∏–ª—Å—è"
  }
    
  if (state.player.hp <= 0) {
    state.player.hp = 0; // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∑–¥–æ—Ä–æ–≤—å–µ –Ω–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
    //restart()
    setTimeout(restart, 3000);
    
  }
}

setInterval(bossAttack, 1000)
setInterval(playerAttack, 1000)
// –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –ø–æ–ª–æ—Å–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
const enemyHealthClass = computed(() => {
  if (state.enemy.hp / state.enemy.maxhp < 0.2) return 'critical-health'
  if (state.enemy.hp / state.enemy.maxhp < 0.5) return 'low-health'
  return ''
})

const playerHealthClass = computed(() => {
  if (state.player.hp / state.player.maxhp < 0.2) return 'critical-health'
  if (state.player.hp / state.player.maxhp < 0.5) return 'low-health'
  return ''
})

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤
function increaseSkill(skill) {
  if (state.player.points > 0) {
    state.player[skill] += 1
    state.player.points -= 1
  } else {
    alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ —É–º–µ–Ω–∏–π!')
  }
}
function restart(){
  state.enemy.hp = state.enemy.maxhp
  state.player.hp = state.player.maxhp
  state.player.maxhp = 100
  state.enemy.maxhp = 100
  state.player.ex = 0
  state.enemy.ex = 0
  state.player.lvl = 1
  state.enemy.lvl = 1
}
function yclon(){
  const pers = Math.random()
  state.log = String(pers)
   if(pers < 0.5 + state.player.lowk * 0.1){
    return true
   }
   else{
    return false
   }

 
}
</script>

<template>
<div class="select" v-if="state.player.playing == false">
  <form class="game-setup">
    <!-- –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ -->
    <div class="character-class">
      
      <select id="class-select" name="characterClass" v-model="state.player.class">
        <option value="–í–æ–∏–Ω">–í–æ–∏–Ω</option>
        <option value="–õ—É—á–Ω–∏–∫">–õ—É—á–Ω–∏–∫</option>
        <option value="–ú–∞–≥">–ú–∞–≥</option>
      </select>
      <p style="color:black">–í—ã–±—Ä–∞–Ω–æ:{{state.player.class}}</p>
    </div>

    <!-- –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ -->
    <div class="difficulty-level">
      <div class="radio-group" >
        <label>
          <input type="radio" name="difficulty" value="–õ–µ–≥–∫–æ" checked v-model="state.clog"> –õ–µ–≥–∫–æ
        </label>
        <label>
          <input type="radio" name="difficulty" value="–°—Ä–µ–¥–Ω–µ" v-model="state.clog"> –°—Ä–µ–¥–Ω–µ
        </label>
        <label>
          <input type="radio" name="difficulty" value="–°–ª–æ–∂–Ω–æ" v-model="state.clog"> –°–ª–æ–∂–Ω–æ
        </label>
      </div>
     <p style="color:black">–í—ã–±—Ä–∞–Ω–æ:{{state.clog}}</p>
      
    </div>

    <!-- –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã -->
    <button type="button" @click="state.player.playing = true" class="start-button">
      –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
    </button>
  </form>
</div>
  <div class="container" v-if="state.player.playing==true">
    <!-- –≠–∫—Ä–∞–Ω —Å–º–µ—Ä—Ç–∏ -->
    <div v-if="state.player.hp <= 0" class="death-screen">
      <h1>–¢—ã —É–º–µ—Ä</h1>
    </div>
    <!-- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–≥—Ä—ã -->
    <div v-else>
      <!-- –í–∫–ª–∞–¥–∫–∏ -->
      <div class="tabs">
        <button
          :class="{ active: activeTab === 'game' }"
          @click="activeTab = 'game'"
        >
          –ò–≥—Ä–∞
        </button>
        <button
          :class="{ active: activeTab === 'skills' }"
          @click="activeTab = 'skills'"
        >
          –ù–∞–≤—ã–∫–∏
        </button>
        <button
          :class="{ active: activeTab === 'shop' }"
          @click="activeTab = 'shop'"
        >
          –ú–∞–≥–∞–∑–∏–Ω
        </button>
      </div>

      <!-- –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–æ–∫ -->
      <div v-if="activeTab === 'game'" class="tab-content">
        <h3 class="enemy-label">–í—Ä–∞–≥</h3>
        <button @click="playerAttack" class="attack-button">
          üëª
        </button>
        <div class="enemy-stats">
          <p>–£—Ä–æ–Ω: {{ state.enemy.attack }}</p>
          <p>HP: {{ state.enemy.hp }} / {{ state.enemy.maxhp }}</p>
          <div class="health-bar">
            <div
              class="health-fill"
              :style="{ width: `${(state.enemy.hp / state.enemy.maxhp) * 100}%` }"
              :class="enemyHealthClass"
            ></div>
          </div>
          <p>–£—Ä–æ–≤–µ–Ω—å: {{ state.enemy.lvl }}</p>
        </div>
        <h3 class="player-label">–ü–µ—Ä—Å–æ–Ω–∞–∂</h3>
        <div class="stats">
          <div class="player-stats">
            <p>–£—Ä–æ–Ω: {{ state.player.attack }}</p>
            <p>{{state.player.yclun}}</p>
            <p>HP: {{ state.player.hp }} / {{ state.player.maxhp }}</p>
            <div class="health-bar">
              <div
                class="health-fill"
                :style="{ width: `${(state.player.hp / state.player.maxhp) * 100}%` }"
                :class="playerHealthClass"
              ></div>
            </div>
            <p>–£—Ä–æ–≤–µ–Ω—å: {{ state.player.lvl }}</p>
            <p>–û–ø—ã—Ç: {{ state.player.ex }}</p>
            <p>{{state.log}}</p>
          </div>
        </div>
      </div>

      <div v-if="activeTab === 'skills'" class="tab-content">
        <h3>–ù–∞–≤—ã–∫–∏</h3>
        <p>–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—á–∫–∏ —É–º–µ–Ω–∏–π: {{ state.player.points }}</p>
        <ul>
          <li>
            <span>–ü–æ–≤—ã—à–µ–Ω–∏–µ HP: {{ state.player.maxhp }}</span>
            <button @click="increaseSkill('maxhp')">+</button>
          </li>
          <li>
            <span>–õ–æ–≤–∫–æ—Å—Ç—å: {{ state.player.lowk }}</span>
            <button @click="increaseSkill('lowk')">+</button>
          </li>
          <li>
            <span>–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: {{ state.player.inte }}</span>
            <button @click="increaseSkill('inte')">+</button>
          </li>
        </ul>
      </div>

      <div v-if="activeTab === 'shop'" class="tab-content">
        <h3>–ú–∞–≥–∞–∑–∏–Ω</h3>
        <p>–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã.</p>
        <ul>
          <li>–ó–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è: 10 –º–æ–Ω–µ—Ç</li>
          <li>–£—Å–∏–ª–µ–Ω–∏–µ –∞—Ç–∞–∫–∏: 20 –º–æ–Ω–µ—Ç</li>
          <li>–£—Å–∏–ª–µ–Ω–∏–µ –∑–∞—â–∏—Ç—ã: 30 –º–æ–Ω–µ—Ç</li>
        </ul>
      </div>
    </div>
  </div>
</template>

<style>
/* –û–±—â–∏–π —Å—Ç–∏–ª—å */
body {
  background-color: #18171c;
  color: #fff;
  font-family: Arial, sans-serif;
}

.container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: 20px;
  padding: 20px;
  background-color: #2c2c2c;
  border: 1px solid #ddd;
  border-radius: 8px;
  width: 400px;
  margin: 50px auto;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

/* –≠–∫—Ä–∞–Ω —Å–º–µ—Ä—Ç–∏ */
.death-screen {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: red;
  display: flex;
  justify-content: center;
  align-items: center;
  color: white;
  font-size: 48px;
  font-weight: bold;
  z-index: 999;
}

/* –í–∫–ª–∞–¥–∫–∏ */
.tabs {
  display: flex;
  gap: 10px;
  margin-bottom: 20px;
}

.tabs button {
  background-color: #3c3c3c;
  color: #fff;
  border: none;
  padding: 10px 20px;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.tabs button.active {
  background-color: #4caf50;
}

.tabs button:hover {
  background-color: #5c5c5c;
}

/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–æ–∫ */
.tab-content {
  text-align: center;

}

/* –ö—Ä—É–≥–ª–∞—è –∫–Ω–æ–ø–∫–∞ */
.attack-button {
  background-color: #000; /* –ß–µ—Ä–Ω—ã–π —Ñ–æ–Ω */
  border: none;
  border-radius: 50%; /* –ö—Ä—É–≥–ª–∞—è —Ñ–æ—Ä–º–∞ */
  width: 100px;
  height: 100px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: background-color 0.3s ease;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
  background: linear-gradient(to bottom, #000, #002f6c); /* –ß–µ—Ä–Ω—ã–π —Å —Å–∏–Ω–∏–º –æ—Ç—Ç–µ–Ω–∫–æ–º */
  font-size: 50px;
}

.attack-button:hover {
  background: linear-gradient(to bottom, #002f6c, #000); /* –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ */
}

/* –ü–æ–ª–æ—Å–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è */
.health-bar {
  width: 100%;
  height: 10px;
  background-color: #ddd;
  border-radius: 5px;
  overflow: hidden;
  margin: 5px 0;
}

.health-fill {
  height: 100%;
  background-color: #4caf50; /* –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è */
  transition: width 0.3s ease;
}

.health-fill.low-health {
  background-color: #ff9800; /* –û—Ä–∞–Ω–∂–µ–≤—ã–π —Ü–≤–µ—Ç */
}

.health-fill.critical-health {
  background-color: #f44336; /* –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç */
}

/* –°—Ç–∏–ª–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ –Ω–∞–≤—ã–∫–æ–≤ */
ul {
  list-style: none;
  padding: 0;
}

li {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin: 10px 0;
}

button {
  background-color: #4caf50;
  color: #fff;
  border: none;
  padding: 5px 10px;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

button:hover {
  background-color: #45a049;
}
/* –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∏–ª—å —Ñ–æ—Ä–º—ã */
/* –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∏–ª—å —Ñ–æ—Ä–º—ã */
.game-setup {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  max-width: 300px;
  margin: 0 auto;
  padding: 1rem;
  border: 1px solid #ccc;
  border-radius: 8px;
  background-color: #f9f9f9;
}

/* –°—Ç–∏–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ */
.character-class label,
.difficulty-level label {
  font-weight: bold;
  margin-bottom: 0.5rem;
}

/* –°—Ç–∏–ª—å –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ */
#class-select {
  padding: 0.5rem;
  border: 1px solid #000;
  border-radius: 4px;
  color:#000
}

/* –°—Ç–∏–ª—å —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–æ–∫ */
.radio-group {
  display: flex;
  gap: 1rem;
  color:#000
}

.radio-group label {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  color:#000
}

/* –°—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏ */
.start-button {
  padding: 0.75rem;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 1rem;
  font-weight: bold;
}

.start-button:hover {
  background-color: #0056b3;
}

</style>